//배열 선언
const arr = [0, 0, 0, 0, 0, 0];

//배열 생성자를 이용하는 방법
const arr1 = new Array(6);
console.log(arr1);
const arr2 = [...new Array(6)].map((_, i) => i + 1);

//Array.fill() 함수를 이용하는 방법
const arr3 = new Array(6).fill(0);

//배열과 차원(배열은 차원과 무관하게 메모리에 연속 할당 된다.)
//2차원 배열
const arr_2 = [[1,2,3,4],[5,6,7,8],[9,10,11,12]];
console.log(arr_2[2][3]);

const arr_3 = [...new Array(3)].map((_, i) => new Array(4).fill(i));
console.log(arr_3);

//배열 연산의 시간 복잡도
const str1 = `
데이터에 접근하기 위한 시간 복잡도는 O(1)
배열에 데이터를 삽입할 경우 1) 맨 뒤에 삽입 할 경우: O(1)
배열에 데이터를 삽입할 경우 2) 맨 앞에 삽입 할 경우: O(N)
배열에 데이터를 삽입할 경우 3) 중간에 삽입 할 경우: O(N)
`;
//배열을 선택할 때 고려할 점
const str2 = `
1. 할당할 수 있는 메모리 크기 확인하기 (1차원 배열은 1000만개, 2차원 배열은 3000*3000 정도)
2. 중간에 데이터 삽입이 많은지 확인(배열은 선형 자료구조이기 때문에 중간이나 처음에 데이터를 빈번하게 삽입하면 시간 복잡도가 높아져 실제 시험에서 시간 초과 발생 가능성)
`;